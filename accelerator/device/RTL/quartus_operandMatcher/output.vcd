$date
	Sat Aug 10 15:54:47 2019
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	1ps
$end

$scope module operandMatcher_tb $end
$var reg 1 ! clock $end
$var reg 1 " resetn $end
$var reg 8 # bitmaskW [7:0] $end
$var reg 8 $ bitmaskA [7:0] $end
$var reg 64 % goldenResult [63:0] $end
$var wire 1 & result [63] $end
$var wire 1 ' result [62] $end
$var wire 1 ( result [61] $end
$var wire 1 ) result [60] $end
$var wire 1 * result [59] $end
$var wire 1 + result [58] $end
$var wire 1 , result [57] $end
$var wire 1 - result [56] $end
$var wire 1 . result [55] $end
$var wire 1 / result [54] $end
$var wire 1 0 result [53] $end
$var wire 1 1 result [52] $end
$var wire 1 2 result [51] $end
$var wire 1 3 result [50] $end
$var wire 1 4 result [49] $end
$var wire 1 5 result [48] $end
$var wire 1 6 result [47] $end
$var wire 1 7 result [46] $end
$var wire 1 8 result [45] $end
$var wire 1 9 result [44] $end
$var wire 1 : result [43] $end
$var wire 1 ; result [42] $end
$var wire 1 < result [41] $end
$var wire 1 = result [40] $end
$var wire 1 > result [39] $end
$var wire 1 ? result [38] $end
$var wire 1 @ result [37] $end
$var wire 1 A result [36] $end
$var wire 1 B result [35] $end
$var wire 1 C result [34] $end
$var wire 1 D result [33] $end
$var wire 1 E result [32] $end
$var wire 1 F result [31] $end
$var wire 1 G result [30] $end
$var wire 1 H result [29] $end
$var wire 1 I result [28] $end
$var wire 1 J result [27] $end
$var wire 1 K result [26] $end
$var wire 1 L result [25] $end
$var wire 1 M result [24] $end
$var wire 1 N result [23] $end
$var wire 1 O result [22] $end
$var wire 1 P result [21] $end
$var wire 1 Q result [20] $end
$var wire 1 R result [19] $end
$var wire 1 S result [18] $end
$var wire 1 T result [17] $end
$var wire 1 U result [16] $end
$var wire 1 V result [15] $end
$var wire 1 W result [14] $end
$var wire 1 X result [13] $end
$var wire 1 Y result [12] $end
$var wire 1 Z result [11] $end
$var wire 1 [ result [10] $end
$var wire 1 \ result [9] $end
$var wire 1 ] result [8] $end
$var wire 1 ^ result [7] $end
$var wire 1 _ result [6] $end
$var wire 1 ` result [5] $end
$var wire 1 a result [4] $end
$var wire 1 b result [3] $end
$var wire 1 c result [2] $end
$var wire 1 d result [1] $end
$var wire 1 e result [0] $end
$var integer 32 f inputFile $end
$var integer 32 g testCaseCount $end

$scope module dut $end
$var parameter 32 h BITMASK_LENGTH $end
$var parameter 32 i INDEX_BITWIDTH $end
$var parameter 32 j ACCUM_LENGTH $end
$var parameter 32 k BITWIDTH_COUNT $end
$var wire 1 l clock $end
$var wire 1 m resetn $end
$var wire 1 n ivalid $end
$var wire 1 o iready $end
$var wire 1 p ovalid $end
$var wire 1 q oready $end
$var wire 1 r bitmaskW [7] $end
$var wire 1 s bitmaskW [6] $end
$var wire 1 t bitmaskW [5] $end
$var wire 1 u bitmaskW [4] $end
$var wire 1 v bitmaskW [3] $end
$var wire 1 w bitmaskW [2] $end
$var wire 1 x bitmaskW [1] $end
$var wire 1 y bitmaskW [0] $end
$var wire 1 z bitmaskA [7] $end
$var wire 1 { bitmaskA [6] $end
$var wire 1 | bitmaskA [5] $end
$var wire 1 } bitmaskA [4] $end
$var wire 1 ~ bitmaskA [3] $end
$var wire 1 !! bitmaskA [2] $end
$var wire 1 "! bitmaskA [1] $end
$var wire 1 #! bitmaskA [0] $end
$var wire 1 & result [63] $end
$var wire 1 ' result [62] $end
$var wire 1 ( result [61] $end
$var wire 1 ) result [60] $end
$var wire 1 * result [59] $end
$var wire 1 + result [58] $end
$var wire 1 , result [57] $end
$var wire 1 - result [56] $end
$var wire 1 . result [55] $end
$var wire 1 / result [54] $end
$var wire 1 0 result [53] $end
$var wire 1 1 result [52] $end
$var wire 1 2 result [51] $end
$var wire 1 3 result [50] $end
$var wire 1 4 result [49] $end
$var wire 1 5 result [48] $end
$var wire 1 6 result [47] $end
$var wire 1 7 result [46] $end
$var wire 1 8 result [45] $end
$var wire 1 9 result [44] $end
$var wire 1 : result [43] $end
$var wire 1 ; result [42] $end
$var wire 1 < result [41] $end
$var wire 1 = result [40] $end
$var wire 1 > result [39] $end
$var wire 1 ? result [38] $end
$var wire 1 @ result [37] $end
$var wire 1 A result [36] $end
$var wire 1 B result [35] $end
$var wire 1 C result [34] $end
$var wire 1 D result [33] $end
$var wire 1 E result [32] $end
$var wire 1 F result [31] $end
$var wire 1 G result [30] $end
$var wire 1 H result [29] $end
$var wire 1 I result [28] $end
$var wire 1 J result [27] $end
$var wire 1 K result [26] $end
$var wire 1 L result [25] $end
$var wire 1 M result [24] $end
$var wire 1 N result [23] $end
$var wire 1 O result [22] $end
$var wire 1 P result [21] $end
$var wire 1 Q result [20] $end
$var wire 1 R result [19] $end
$var wire 1 S result [18] $end
$var wire 1 T result [17] $end
$var wire 1 U result [16] $end
$var wire 1 V result [15] $end
$var wire 1 W result [14] $end
$var wire 1 X result [13] $end
$var wire 1 Y result [12] $end
$var wire 1 Z result [11] $end
$var wire 1 [ result [10] $end
$var wire 1 \ result [9] $end
$var wire 1 ] result [8] $end
$var wire 1 ^ result [7] $end
$var wire 1 _ result [6] $end
$var wire 1 ` result [5] $end
$var wire 1 a result [4] $end
$var wire 1 b result [3] $end
$var wire 1 c result [2] $end
$var wire 1 d result [1] $end
$var wire 1 e result [0] $end
$var reg 8 $! regMutualBitmask [7:0] $end
$var reg 24 %! regShiftAccum [23:0] $end
$var reg 24 &! regActivationMaskedAccum [23:0] $end
$var reg 24 '! regWeightMaskedAccum [23:0] $end
$var reg 24 (! regActivationDenseAccum [23:0] $end
$var reg 24 )! regWeightDenseAccum [23:0] $end
$var reg 4 *! regBitWidthCount [3:0] $end
$var wire 1 +! wireMutualBitmask [7] $end
$var wire 1 ,! wireMutualBitmask [6] $end
$var wire 1 -! wireMutualBitmask [5] $end
$var wire 1 .! wireMutualBitmask [4] $end
$var wire 1 /! wireMutualBitmask [3] $end
$var wire 1 0! wireMutualBitmask [2] $end
$var wire 1 1! wireMutualBitmask [1] $end
$var wire 1 2! wireMutualBitmask [0] $end
$var wire 1 3! wireNegatedMutualBitmask [7] $end
$var wire 1 4! wireNegatedMutualBitmask [6] $end
$var wire 1 5! wireNegatedMutualBitmask [5] $end
$var wire 1 6! wireNegatedMutualBitmask [4] $end
$var wire 1 7! wireNegatedMutualBitmask [3] $end
$var wire 1 8! wireNegatedMutualBitmask [2] $end
$var wire 1 9! wireNegatedMutualBitmask [1] $end
$var wire 1 :! wireNegatedMutualBitmask [0] $end
$var wire 1 ;! wireShiftAccum [23] $end
$var wire 1 <! wireShiftAccum [22] $end
$var wire 1 =! wireShiftAccum [21] $end
$var wire 1 >! wireShiftAccum [20] $end
$var wire 1 ?! wireShiftAccum [19] $end
$var wire 1 @! wireShiftAccum [18] $end
$var wire 1 A! wireShiftAccum [17] $end
$var wire 1 B! wireShiftAccum [16] $end
$var wire 1 C! wireShiftAccum [15] $end
$var wire 1 D! wireShiftAccum [14] $end
$var wire 1 E! wireShiftAccum [13] $end
$var wire 1 F! wireShiftAccum [12] $end
$var wire 1 G! wireShiftAccum [11] $end
$var wire 1 H! wireShiftAccum [10] $end
$var wire 1 I! wireShiftAccum [9] $end
$var wire 1 J! wireShiftAccum [8] $end
$var wire 1 K! wireShiftAccum [7] $end
$var wire 1 L! wireShiftAccum [6] $end
$var wire 1 M! wireShiftAccum [5] $end
$var wire 1 N! wireShiftAccum [4] $end
$var wire 1 O! wireShiftAccum [3] $end
$var wire 1 P! wireShiftAccum [2] $end
$var wire 1 Q! wireShiftAccum [1] $end
$var wire 1 R! wireShiftAccum [0] $end
$var wire 1 S! wireActivationAccum [23] $end
$var wire 1 T! wireActivationAccum [22] $end
$var wire 1 U! wireActivationAccum [21] $end
$var wire 1 V! wireActivationAccum [20] $end
$var wire 1 W! wireActivationAccum [19] $end
$var wire 1 X! wireActivationAccum [18] $end
$var wire 1 Y! wireActivationAccum [17] $end
$var wire 1 Z! wireActivationAccum [16] $end
$var wire 1 [! wireActivationAccum [15] $end
$var wire 1 \! wireActivationAccum [14] $end
$var wire 1 ]! wireActivationAccum [13] $end
$var wire 1 ^! wireActivationAccum [12] $end
$var wire 1 _! wireActivationAccum [11] $end
$var wire 1 `! wireActivationAccum [10] $end
$var wire 1 a! wireActivationAccum [9] $end
$var wire 1 b! wireActivationAccum [8] $end
$var wire 1 c! wireActivationAccum [7] $end
$var wire 1 d! wireActivationAccum [6] $end
$var wire 1 e! wireActivationAccum [5] $end
$var wire 1 f! wireActivationAccum [4] $end
$var wire 1 g! wireActivationAccum [3] $end
$var wire 1 h! wireActivationAccum [2] $end
$var wire 1 i! wireActivationAccum [1] $end
$var wire 1 j! wireActivationAccum [0] $end
$var wire 1 k! wireWeightAccum [23] $end
$var wire 1 l! wireWeightAccum [22] $end
$var wire 1 m! wireWeightAccum [21] $end
$var wire 1 n! wireWeightAccum [20] $end
$var wire 1 o! wireWeightAccum [19] $end
$var wire 1 p! wireWeightAccum [18] $end
$var wire 1 q! wireWeightAccum [17] $end
$var wire 1 r! wireWeightAccum [16] $end
$var wire 1 s! wireWeightAccum [15] $end
$var wire 1 t! wireWeightAccum [14] $end
$var wire 1 u! wireWeightAccum [13] $end
$var wire 1 v! wireWeightAccum [12] $end
$var wire 1 w! wireWeightAccum [11] $end
$var wire 1 x! wireWeightAccum [10] $end
$var wire 1 y! wireWeightAccum [9] $end
$var wire 1 z! wireWeightAccum [8] $end
$var wire 1 {! wireWeightAccum [7] $end
$var wire 1 |! wireWeightAccum [6] $end
$var wire 1 }! wireWeightAccum [5] $end
$var wire 1 ~! wireWeightAccum [4] $end
$var wire 1 !" wireWeightAccum [3] $end
$var wire 1 "" wireWeightAccum [2] $end
$var wire 1 #" wireWeightAccum [1] $end
$var wire 1 $" wireWeightAccum [0] $end
$var wire 1 %" wireActivationMaskedAccum [23] $end
$var wire 1 &" wireActivationMaskedAccum [22] $end
$var wire 1 '" wireActivationMaskedAccum [21] $end
$var wire 1 (" wireActivationMaskedAccum [20] $end
$var wire 1 )" wireActivationMaskedAccum [19] $end
$var wire 1 *" wireActivationMaskedAccum [18] $end
$var wire 1 +" wireActivationMaskedAccum [17] $end
$var wire 1 ," wireActivationMaskedAccum [16] $end
$var wire 1 -" wireActivationMaskedAccum [15] $end
$var wire 1 ." wireActivationMaskedAccum [14] $end
$var wire 1 /" wireActivationMaskedAccum [13] $end
$var wire 1 0" wireActivationMaskedAccum [12] $end
$var wire 1 1" wireActivationMaskedAccum [11] $end
$var wire 1 2" wireActivationMaskedAccum [10] $end
$var wire 1 3" wireActivationMaskedAccum [9] $end
$var wire 1 4" wireActivationMaskedAccum [8] $end
$var wire 1 5" wireActivationMaskedAccum [7] $end
$var wire 1 6" wireActivationMaskedAccum [6] $end
$var wire 1 7" wireActivationMaskedAccum [5] $end
$var wire 1 8" wireActivationMaskedAccum [4] $end
$var wire 1 9" wireActivationMaskedAccum [3] $end
$var wire 1 :" wireActivationMaskedAccum [2] $end
$var wire 1 ;" wireActivationMaskedAccum [1] $end
$var wire 1 <" wireActivationMaskedAccum [0] $end
$var wire 1 =" wireWeightMaskedAccum [23] $end
$var wire 1 >" wireWeightMaskedAccum [22] $end
$var wire 1 ?" wireWeightMaskedAccum [21] $end
$var wire 1 @" wireWeightMaskedAccum [20] $end
$var wire 1 A" wireWeightMaskedAccum [19] $end
$var wire 1 B" wireWeightMaskedAccum [18] $end
$var wire 1 C" wireWeightMaskedAccum [17] $end
$var wire 1 D" wireWeightMaskedAccum [16] $end
$var wire 1 E" wireWeightMaskedAccum [15] $end
$var wire 1 F" wireWeightMaskedAccum [14] $end
$var wire 1 G" wireWeightMaskedAccum [13] $end
$var wire 1 H" wireWeightMaskedAccum [12] $end
$var wire 1 I" wireWeightMaskedAccum [11] $end
$var wire 1 J" wireWeightMaskedAccum [10] $end
$var wire 1 K" wireWeightMaskedAccum [9] $end
$var wire 1 L" wireWeightMaskedAccum [8] $end
$var wire 1 M" wireWeightMaskedAccum [7] $end
$var wire 1 N" wireWeightMaskedAccum [6] $end
$var wire 1 O" wireWeightMaskedAccum [5] $end
$var wire 1 P" wireWeightMaskedAccum [4] $end
$var wire 1 Q" wireWeightMaskedAccum [3] $end
$var wire 1 R" wireWeightMaskedAccum [2] $end
$var wire 1 S" wireWeightMaskedAccum [1] $end
$var wire 1 T" wireWeightMaskedAccum [0] $end
$var wire 1 U" wireActivationDenseAccum [23] $end
$var wire 1 V" wireActivationDenseAccum [22] $end
$var wire 1 W" wireActivationDenseAccum [21] $end
$var wire 1 X" wireActivationDenseAccum [20] $end
$var wire 1 Y" wireActivationDenseAccum [19] $end
$var wire 1 Z" wireActivationDenseAccum [18] $end
$var wire 1 [" wireActivationDenseAccum [17] $end
$var wire 1 \" wireActivationDenseAccum [16] $end
$var wire 1 ]" wireActivationDenseAccum [15] $end
$var wire 1 ^" wireActivationDenseAccum [14] $end
$var wire 1 _" wireActivationDenseAccum [13] $end
$var wire 1 `" wireActivationDenseAccum [12] $end
$var wire 1 a" wireActivationDenseAccum [11] $end
$var wire 1 b" wireActivationDenseAccum [10] $end
$var wire 1 c" wireActivationDenseAccum [9] $end
$var wire 1 d" wireActivationDenseAccum [8] $end
$var wire 1 e" wireActivationDenseAccum [7] $end
$var wire 1 f" wireActivationDenseAccum [6] $end
$var wire 1 g" wireActivationDenseAccum [5] $end
$var wire 1 h" wireActivationDenseAccum [4] $end
$var wire 1 i" wireActivationDenseAccum [3] $end
$var wire 1 j" wireActivationDenseAccum [2] $end
$var wire 1 k" wireActivationDenseAccum [1] $end
$var wire 1 l" wireActivationDenseAccum [0] $end
$var wire 1 m" wireWeightDenseAccum [23] $end
$var wire 1 n" wireWeightDenseAccum [22] $end
$var wire 1 o" wireWeightDenseAccum [21] $end
$var wire 1 p" wireWeightDenseAccum [20] $end
$var wire 1 q" wireWeightDenseAccum [19] $end
$var wire 1 r" wireWeightDenseAccum [18] $end
$var wire 1 s" wireWeightDenseAccum [17] $end
$var wire 1 t" wireWeightDenseAccum [16] $end
$var wire 1 u" wireWeightDenseAccum [15] $end
$var wire 1 v" wireWeightDenseAccum [14] $end
$var wire 1 w" wireWeightDenseAccum [13] $end
$var wire 1 x" wireWeightDenseAccum [12] $end
$var wire 1 y" wireWeightDenseAccum [11] $end
$var wire 1 z" wireWeightDenseAccum [10] $end
$var wire 1 {" wireWeightDenseAccum [9] $end
$var wire 1 |" wireWeightDenseAccum [8] $end
$var wire 1 }" wireWeightDenseAccum [7] $end
$var wire 1 ~" wireWeightDenseAccum [6] $end
$var wire 1 !# wireWeightDenseAccum [5] $end
$var wire 1 "# wireWeightDenseAccum [4] $end
$var wire 1 ## wireWeightDenseAccum [3] $end
$var wire 1 $# wireWeightDenseAccum [2] $end
$var wire 1 %# wireWeightDenseAccum [1] $end
$var wire 1 &# wireWeightDenseAccum [0] $end
$var wire 1 '# wireBitWidthCount [3] $end
$var wire 1 (# wireBitWidthCount [2] $end
$var wire 1 )# wireBitWidthCount [1] $end
$var wire 1 *# wireBitWidthCount [0] $end

$scope module inst_accumulator_shiftAccumulator $end
$var parameter 32 +# BITMASK_LENGTH $end
$var parameter 32 ,# INDEX_BITWIDTH $end
$var wire 1 3! bitmask [7] $end
$var wire 1 4! bitmask [6] $end
$var wire 1 5! bitmask [5] $end
$var wire 1 6! bitmask [4] $end
$var wire 1 7! bitmask [3] $end
$var wire 1 8! bitmask [2] $end
$var wire 1 9! bitmask [1] $end
$var wire 1 :! bitmask [0] $end
$var wire 1 ;! index [23] $end
$var wire 1 <! index [22] $end
$var wire 1 =! index [21] $end
$var wire 1 >! index [20] $end
$var wire 1 ?! index [19] $end
$var wire 1 @! index [18] $end
$var wire 1 A! index [17] $end
$var wire 1 B! index [16] $end
$var wire 1 C! index [15] $end
$var wire 1 D! index [14] $end
$var wire 1 E! index [13] $end
$var wire 1 F! index [12] $end
$var wire 1 G! index [11] $end
$var wire 1 H! index [10] $end
$var wire 1 I! index [9] $end
$var wire 1 J! index [8] $end
$var wire 1 K! index [7] $end
$var wire 1 L! index [6] $end
$var wire 1 M! index [5] $end
$var wire 1 N! index [4] $end
$var wire 1 O! index [3] $end
$var wire 1 P! index [2] $end
$var wire 1 Q! index [1] $end
$var wire 1 R! index [0] $end
$var reg 24 -# wireIndex [23:0] $end
$var integer 32 .# i $end

$scope begin accum $end
$upscope $end
$upscope $end

$scope module inst_accumulator_activationAccumulator $end
$var parameter 32 /# BITMASK_LENGTH $end
$var parameter 32 0# INDEX_BITWIDTH $end
$var wire 1 z bitmask [7] $end
$var wire 1 { bitmask [6] $end
$var wire 1 | bitmask [5] $end
$var wire 1 } bitmask [4] $end
$var wire 1 ~ bitmask [3] $end
$var wire 1 !! bitmask [2] $end
$var wire 1 "! bitmask [1] $end
$var wire 1 #! bitmask [0] $end
$var wire 1 S! index [23] $end
$var wire 1 T! index [22] $end
$var wire 1 U! index [21] $end
$var wire 1 V! index [20] $end
$var wire 1 W! index [19] $end
$var wire 1 X! index [18] $end
$var wire 1 Y! index [17] $end
$var wire 1 Z! index [16] $end
$var wire 1 [! index [15] $end
$var wire 1 \! index [14] $end
$var wire 1 ]! index [13] $end
$var wire 1 ^! index [12] $end
$var wire 1 _! index [11] $end
$var wire 1 `! index [10] $end
$var wire 1 a! index [9] $end
$var wire 1 b! index [8] $end
$var wire 1 c! index [7] $end
$var wire 1 d! index [6] $end
$var wire 1 e! index [5] $end
$var wire 1 f! index [4] $end
$var wire 1 g! index [3] $end
$var wire 1 h! index [2] $end
$var wire 1 i! index [1] $end
$var wire 1 j! index [0] $end
$var reg 24 1# wireIndex [23:0] $end
$var integer 32 2# i $end

$scope begin accum $end
$upscope $end
$upscope $end

$scope module inst_accumulator_weightAccumulator $end
$var parameter 32 3# BITMASK_LENGTH $end
$var parameter 32 4# INDEX_BITWIDTH $end
$var wire 1 r bitmask [7] $end
$var wire 1 s bitmask [6] $end
$var wire 1 t bitmask [5] $end
$var wire 1 u bitmask [4] $end
$var wire 1 v bitmask [3] $end
$var wire 1 w bitmask [2] $end
$var wire 1 x bitmask [1] $end
$var wire 1 y bitmask [0] $end
$var wire 1 k! index [23] $end
$var wire 1 l! index [22] $end
$var wire 1 m! index [21] $end
$var wire 1 n! index [20] $end
$var wire 1 o! index [19] $end
$var wire 1 p! index [18] $end
$var wire 1 q! index [17] $end
$var wire 1 r! index [16] $end
$var wire 1 s! index [15] $end
$var wire 1 t! index [14] $end
$var wire 1 u! index [13] $end
$var wire 1 v! index [12] $end
$var wire 1 w! index [11] $end
$var wire 1 x! index [10] $end
$var wire 1 y! index [9] $end
$var wire 1 z! index [8] $end
$var wire 1 {! index [7] $end
$var wire 1 |! index [6] $end
$var wire 1 }! index [5] $end
$var wire 1 ~! index [4] $end
$var wire 1 !" index [3] $end
$var wire 1 "" index [2] $end
$var wire 1 #" index [1] $end
$var wire 1 $" index [0] $end
$var reg 24 5# wireIndex [23:0] $end
$var integer 32 6# i $end

$scope begin accum $end
$upscope $end
$upscope $end

$scope module inst_extendAndMask_activationMask $end
$var parameter 32 7# BITMASK_LENGTH $end
$var parameter 32 8# INDEX_BITWIDTH $end
$var wire 1 S! unmaskedIndices [23] $end
$var wire 1 T! unmaskedIndices [22] $end
$var wire 1 U! unmaskedIndices [21] $end
$var wire 1 V! unmaskedIndices [20] $end
$var wire 1 W! unmaskedIndices [19] $end
$var wire 1 X! unmaskedIndices [18] $end
$var wire 1 Y! unmaskedIndices [17] $end
$var wire 1 Z! unmaskedIndices [16] $end
$var wire 1 [! unmaskedIndices [15] $end
$var wire 1 \! unmaskedIndices [14] $end
$var wire 1 ]! unmaskedIndices [13] $end
$var wire 1 ^! unmaskedIndices [12] $end
$var wire 1 _! unmaskedIndices [11] $end
$var wire 1 `! unmaskedIndices [10] $end
$var wire 1 a! unmaskedIndices [9] $end
$var wire 1 b! unmaskedIndices [8] $end
$var wire 1 c! unmaskedIndices [7] $end
$var wire 1 d! unmaskedIndices [6] $end
$var wire 1 e! unmaskedIndices [5] $end
$var wire 1 f! unmaskedIndices [4] $end
$var wire 1 g! unmaskedIndices [3] $end
$var wire 1 h! unmaskedIndices [2] $end
$var wire 1 i! unmaskedIndices [1] $end
$var wire 1 j! unmaskedIndices [0] $end
$var wire 1 +! bitmask [7] $end
$var wire 1 ,! bitmask [6] $end
$var wire 1 -! bitmask [5] $end
$var wire 1 .! bitmask [4] $end
$var wire 1 /! bitmask [3] $end
$var wire 1 0! bitmask [2] $end
$var wire 1 1! bitmask [1] $end
$var wire 1 2! bitmask [0] $end
$var reg 24 9# maskedIndices [23:0] $end
$var integer 32 :# i $end

$scope begin genloop $end
$upscope $end
$upscope $end

$scope module inst_extendAndMask_weightMask $end
$var parameter 32 ;# BITMASK_LENGTH $end
$var parameter 32 <# INDEX_BITWIDTH $end
$var wire 1 k! unmaskedIndices [23] $end
$var wire 1 l! unmaskedIndices [22] $end
$var wire 1 m! unmaskedIndices [21] $end
$var wire 1 n! unmaskedIndices [20] $end
$var wire 1 o! unmaskedIndices [19] $end
$var wire 1 p! unmaskedIndices [18] $end
$var wire 1 q! unmaskedIndices [17] $end
$var wire 1 r! unmaskedIndices [16] $end
$var wire 1 s! unmaskedIndices [15] $end
$var wire 1 t! unmaskedIndices [14] $end
$var wire 1 u! unmaskedIndices [13] $end
$var wire 1 v! unmaskedIndices [12] $end
$var wire 1 w! unmaskedIndices [11] $end
$var wire 1 x! unmaskedIndices [10] $end
$var wire 1 y! unmaskedIndices [9] $end
$var wire 1 z! unmaskedIndices [8] $end
$var wire 1 {! unmaskedIndices [7] $end
$var wire 1 |! unmaskedIndices [6] $end
$var wire 1 }! unmaskedIndices [5] $end
$var wire 1 ~! unmaskedIndices [4] $end
$var wire 1 !" unmaskedIndices [3] $end
$var wire 1 "" unmaskedIndices [2] $end
$var wire 1 #" unmaskedIndices [1] $end
$var wire 1 $" unmaskedIndices [0] $end
$var wire 1 +! bitmask [7] $end
$var wire 1 ,! bitmask [6] $end
$var wire 1 -! bitmask [5] $end
$var wire 1 .! bitmask [4] $end
$var wire 1 /! bitmask [3] $end
$var wire 1 0! bitmask [2] $end
$var wire 1 1! bitmask [1] $end
$var wire 1 2! bitmask [0] $end
$var reg 24 =# maskedIndices [23:0] $end
$var integer 32 ># i $end

$scope begin genloop $end
$upscope $end
$upscope $end

$scope module inst_popCounter_pairCount $end
$var parameter 32 ?# BITMASK_LENGTH $end
$var parameter 32 @# BITWIDTH_OUTPUT $end
$var wire 1 A# bitmask [7] $end
$var wire 1 B# bitmask [6] $end
$var wire 1 C# bitmask [5] $end
$var wire 1 D# bitmask [4] $end
$var wire 1 E# bitmask [3] $end
$var wire 1 F# bitmask [2] $end
$var wire 1 G# bitmask [1] $end
$var wire 1 H# bitmask [0] $end
$var wire 1 '# count [3] $end
$var wire 1 (# count [2] $end
$var wire 1 )# count [1] $end
$var wire 1 *# count [0] $end
$var reg 32 I# counterBank [31:0] $end
$var integer 32 J# i $end
$upscope $end

$scope module inst_collapseBubble_activation $end
$var parameter 32 K# BITMASK_LENGTH $end
$var parameter 32 L# BITWIDTH_INDEX $end
$var parameter 32 M# BITWIDTH_NUMBER $end
$var wire 1 N# inputWithGap [23] $end
$var wire 1 O# inputWithGap [22] $end
$var wire 1 P# inputWithGap [21] $end
$var wire 1 Q# inputWithGap [20] $end
$var wire 1 R# inputWithGap [19] $end
$var wire 1 S# inputWithGap [18] $end
$var wire 1 T# inputWithGap [17] $end
$var wire 1 U# inputWithGap [16] $end
$var wire 1 V# inputWithGap [15] $end
$var wire 1 W# inputWithGap [14] $end
$var wire 1 X# inputWithGap [13] $end
$var wire 1 Y# inputWithGap [12] $end
$var wire 1 Z# inputWithGap [11] $end
$var wire 1 [# inputWithGap [10] $end
$var wire 1 \# inputWithGap [9] $end
$var wire 1 ]# inputWithGap [8] $end
$var wire 1 ^# inputWithGap [7] $end
$var wire 1 _# inputWithGap [6] $end
$var wire 1 `# inputWithGap [5] $end
$var wire 1 a# inputWithGap [4] $end
$var wire 1 b# inputWithGap [3] $end
$var wire 1 c# inputWithGap [2] $end
$var wire 1 d# inputWithGap [1] $end
$var wire 1 e# inputWithGap [0] $end
$var wire 1 f# positions [23] $end
$var wire 1 g# positions [22] $end
$var wire 1 h# positions [21] $end
$var wire 1 i# positions [20] $end
$var wire 1 j# positions [19] $end
$var wire 1 k# positions [18] $end
$var wire 1 l# positions [17] $end
$var wire 1 m# positions [16] $end
$var wire 1 n# positions [15] $end
$var wire 1 o# positions [14] $end
$var wire 1 p# positions [13] $end
$var wire 1 q# positions [12] $end
$var wire 1 r# positions [11] $end
$var wire 1 s# positions [10] $end
$var wire 1 t# positions [9] $end
$var wire 1 u# positions [8] $end
$var wire 1 v# positions [7] $end
$var wire 1 w# positions [6] $end
$var wire 1 x# positions [5] $end
$var wire 1 y# positions [4] $end
$var wire 1 z# positions [3] $end
$var wire 1 {# positions [2] $end
$var wire 1 |# positions [1] $end
$var wire 1 }# positions [0] $end
$var wire 1 U" outputWithoutGap [23] $end
$var wire 1 V" outputWithoutGap [22] $end
$var wire 1 W" outputWithoutGap [21] $end
$var wire 1 X" outputWithoutGap [20] $end
$var wire 1 Y" outputWithoutGap [19] $end
$var wire 1 Z" outputWithoutGap [18] $end
$var wire 1 [" outputWithoutGap [17] $end
$var wire 1 \" outputWithoutGap [16] $end
$var wire 1 ]" outputWithoutGap [15] $end
$var wire 1 ^" outputWithoutGap [14] $end
$var wire 1 _" outputWithoutGap [13] $end
$var wire 1 `" outputWithoutGap [12] $end
$var wire 1 a" outputWithoutGap [11] $end
$var wire 1 b" outputWithoutGap [10] $end
$var wire 1 c" outputWithoutGap [9] $end
$var wire 1 d" outputWithoutGap [8] $end
$var wire 1 e" outputWithoutGap [7] $end
$var wire 1 f" outputWithoutGap [6] $end
$var wire 1 g" outputWithoutGap [5] $end
$var wire 1 h" outputWithoutGap [4] $end
$var wire 1 i" outputWithoutGap [3] $end
$var wire 1 j" outputWithoutGap [2] $end
$var wire 1 k" outputWithoutGap [1] $end
$var wire 1 l" outputWithoutGap [0] $end

$scope begin genloop[7] $end
$var parameter 32 ~# i $end

$scope module inst_indexExtraction $end
$var parameter 32 !$ NUM_INDEX $end
$var parameter 32 "$ BITWIDTH_INDEX $end
$var parameter 32 #$ BITWIDTH_NUMBER $end
$var wire 1 f# shiftList [2] $end
$var wire 1 g# shiftList [1] $end
$var wire 1 h# shiftList [0] $end
$var wire 1 N# inputWithGap [2] $end
$var wire 1 O# inputWithGap [1] $end
$var wire 1 P# inputWithGap [0] $end
$var reg 3 $$ outputNumber [2:0] $end
$var integer 32 %$ i $end
$upscope $end
$upscope $end

$scope begin genloop[6] $end
$var parameter 32 &$ i $end

$scope module inst_indexExtraction $end
$var parameter 32 '$ NUM_INDEX $end
$var parameter 32 ($ BITWIDTH_INDEX $end
$var parameter 32 )$ BITWIDTH_NUMBER $end
$var wire 1 f# shiftList [5] $end
$var wire 1 g# shiftList [4] $end
$var wire 1 h# shiftList [3] $end
$var wire 1 i# shiftList [2] $end
$var wire 1 j# shiftList [1] $end
$var wire 1 k# shiftList [0] $end
$var wire 1 N# inputWithGap [5] $end
$var wire 1 O# inputWithGap [4] $end
$var wire 1 P# inputWithGap [3] $end
$var wire 1 Q# inputWithGap [2] $end
$var wire 1 R# inputWithGap [1] $end
$var wire 1 S# inputWithGap [0] $end
$var reg 3 *$ outputNumber [2:0] $end
$var integer 32 +$ i $end
$upscope $end
$upscope $end

$scope begin genloop[5] $end
$var parameter 32 ,$ i $end

$scope module inst_indexExtraction $end
$var parameter 32 -$ NUM_INDEX $end
$var parameter 32 .$ BITWIDTH_INDEX $end
$var parameter 32 /$ BITWIDTH_NUMBER $end
$var wire 1 f# shiftList [8] $end
$var wire 1 g# shiftList [7] $end
$var wire 1 h# shiftList [6] $end
$var wire 1 i# shiftList [5] $end
$var wire 1 j# shiftList [4] $end
$var wire 1 k# shiftList [3] $end
$var wire 1 l# shiftList [2] $end
$var wire 1 m# shiftList [1] $end
$var wire 1 n# shiftList [0] $end
$var wire 1 N# inputWithGap [8] $end
$var wire 1 O# inputWithGap [7] $end
$var wire 1 P# inputWithGap [6] $end
$var wire 1 Q# inputWithGap [5] $end
$var wire 1 R# inputWithGap [4] $end
$var wire 1 S# inputWithGap [3] $end
$var wire 1 T# inputWithGap [2] $end
$var wire 1 U# inputWithGap [1] $end
$var wire 1 V# inputWithGap [0] $end
$var reg 3 0$ outputNumber [2:0] $end
$var integer 32 1$ i $end
$upscope $end
$upscope $end

$scope begin genloop[4] $end
$var parameter 32 2$ i $end

$scope module inst_indexExtraction $end
$var parameter 32 3$ NUM_INDEX $end
$var parameter 32 4$ BITWIDTH_INDEX $end
$var parameter 32 5$ BITWIDTH_NUMBER $end
$var wire 1 f# shiftList [11] $end
$var wire 1 g# shiftList [10] $end
$var wire 1 h# shiftList [9] $end
$var wire 1 i# shiftList [8] $end
$var wire 1 j# shiftList [7] $end
$var wire 1 k# shiftList [6] $end
$var wire 1 l# shiftList [5] $end
$var wire 1 m# shiftList [4] $end
$var wire 1 n# shiftList [3] $end
$var wire 1 o# shiftList [2] $end
$var wire 1 p# shiftList [1] $end
$var wire 1 q# shiftList [0] $end
$var wire 1 N# inputWithGap [11] $end
$var wire 1 O# inputWithGap [10] $end
$var wire 1 P# inputWithGap [9] $end
$var wire 1 Q# inputWithGap [8] $end
$var wire 1 R# inputWithGap [7] $end
$var wire 1 S# inputWithGap [6] $end
$var wire 1 T# inputWithGap [5] $end
$var wire 1 U# inputWithGap [4] $end
$var wire 1 V# inputWithGap [3] $end
$var wire 1 W# inputWithGap [2] $end
$var wire 1 X# inputWithGap [1] $end
$var wire 1 Y# inputWithGap [0] $end
$var reg 3 6$ outputNumber [2:0] $end
$var integer 32 7$ i $end
$upscope $end
$upscope $end

$scope begin genloop[3] $end
$var parameter 32 8$ i $end

$scope module inst_indexExtraction $end
$var parameter 32 9$ NUM_INDEX $end
$var parameter 32 :$ BITWIDTH_INDEX $end
$var parameter 32 ;$ BITWIDTH_NUMBER $end
$var wire 1 f# shiftList [14] $end
$var wire 1 g# shiftList [13] $end
$var wire 1 h# shiftList [12] $end
$var wire 1 i# shiftList [11] $end
$var wire 1 j# shiftList [10] $end
$var wire 1 k# shiftList [9] $end
$var wire 1 l# shiftList [8] $end
$var wire 1 m# shiftList [7] $end
$var wire 1 n# shiftList [6] $end
$var wire 1 o# shiftList [5] $end
$var wire 1 p# shiftList [4] $end
$var wire 1 q# shiftList [3] $end
$var wire 1 r# shiftList [2] $end
$var wire 1 s# shiftList [1] $end
$var wire 1 t# shiftList [0] $end
$var wire 1 N# inputWithGap [14] $end
$var wire 1 O# inputWithGap [13] $end
$var wire 1 P# inputWithGap [12] $end
$var wire 1 Q# inputWithGap [11] $end
$var wire 1 R# inputWithGap [10] $end
$var wire 1 S# inputWithGap [9] $end
$var wire 1 T# inputWithGap [8] $end
$var wire 1 U# inputWithGap [7] $end
$var wire 1 V# inputWithGap [6] $end
$var wire 1 W# inputWithGap [5] $end
$var wire 1 X# inputWithGap [4] $end
$var wire 1 Y# inputWithGap [3] $end
$var wire 1 Z# inputWithGap [2] $end
$var wire 1 [# inputWithGap [1] $end
$var wire 1 \# inputWithGap [0] $end
$var reg 3 <$ outputNumber [2:0] $end
$var integer 32 =$ i $end
$upscope $end
$upscope $end

$scope begin genloop[2] $end
$var parameter 32 >$ i $end

$scope module inst_indexExtraction $end
$var parameter 32 ?$ NUM_INDEX $end
$var parameter 32 @$ BITWIDTH_INDEX $end
$var parameter 32 A$ BITWIDTH_NUMBER $end
$var wire 1 f# shiftList [17] $end
$var wire 1 g# shiftList [16] $end
$var wire 1 h# shiftList [15] $end
$var wire 1 i# shiftList [14] $end
$var wire 1 j# shiftList [13] $end
$var wire 1 k# shiftList [12] $end
$var wire 1 l# shiftList [11] $end
$var wire 1 m# shiftList [10] $end
$var wire 1 n# shiftList [9] $end
$var wire 1 o# shiftList [8] $end
$var wire 1 p# shiftList [7] $end
$var wire 1 q# shiftList [6] $end
$var wire 1 r# shiftList [5] $end
$var wire 1 s# shiftList [4] $end
$var wire 1 t# shiftList [3] $end
$var wire 1 u# shiftList [2] $end
$var wire 1 v# shiftList [1] $end
$var wire 1 w# shiftList [0] $end
$var wire 1 N# inputWithGap [17] $end
$var wire 1 O# inputWithGap [16] $end
$var wire 1 P# inputWithGap [15] $end
$var wire 1 Q# inputWithGap [14] $end
$var wire 1 R# inputWithGap [13] $end
$var wire 1 S# inputWithGap [12] $end
$var wire 1 T# inputWithGap [11] $end
$var wire 1 U# inputWithGap [10] $end
$var wire 1 V# inputWithGap [9] $end
$var wire 1 W# inputWithGap [8] $end
$var wire 1 X# inputWithGap [7] $end
$var wire 1 Y# inputWithGap [6] $end
$var wire 1 Z# inputWithGap [5] $end
$var wire 1 [# inputWithGap [4] $end
$var wire 1 \# inputWithGap [3] $end
$var wire 1 ]# inputWithGap [2] $end
$var wire 1 ^# inputWithGap [1] $end
$var wire 1 _# inputWithGap [0] $end
$var reg 3 B$ outputNumber [2:0] $end
$var integer 32 C$ i $end
$upscope $end
$upscope $end

$scope begin genloop[1] $end
$var parameter 32 D$ i $end

$scope module inst_indexExtraction $end
$var parameter 32 E$ NUM_INDEX $end
$var parameter 32 F$ BITWIDTH_INDEX $end
$var parameter 32 G$ BITWIDTH_NUMBER $end
$var wire 1 f# shiftList [20] $end
$var wire 1 g# shiftList [19] $end
$var wire 1 h# shiftList [18] $end
$var wire 1 i# shiftList [17] $end
$var wire 1 j# shiftList [16] $end
$var wire 1 k# shiftList [15] $end
$var wire 1 l# shiftList [14] $end
$var wire 1 m# shiftList [13] $end
$var wire 1 n# shiftList [12] $end
$var wire 1 o# shiftList [11] $end
$var wire 1 p# shiftList [10] $end
$var wire 1 q# shiftList [9] $end
$var wire 1 r# shiftList [8] $end
$var wire 1 s# shiftList [7] $end
$var wire 1 t# shiftList [6] $end
$var wire 1 u# shiftList [5] $end
$var wire 1 v# shiftList [4] $end
$var wire 1 w# shiftList [3] $end
$var wire 1 x# shiftList [2] $end
$var wire 1 y# shiftList [1] $end
$var wire 1 z# shiftList [0] $end
$var wire 1 N# inputWithGap [20] $end
$var wire 1 O# inputWithGap [19] $end
$var wire 1 P# inputWithGap [18] $end
$var wire 1 Q# inputWithGap [17] $end
$var wire 1 R# inputWithGap [16] $end
$var wire 1 S# inputWithGap [15] $end
$var wire 1 T# inputWithGap [14] $end
$var wire 1 U# inputWithGap [13] $end
$var wire 1 V# inputWithGap [12] $end
$var wire 1 W# inputWithGap [11] $end
$var wire 1 X# inputWithGap [10] $end
$var wire 1 Y# inputWithGap [9] $end
$var wire 1 Z# inputWithGap [8] $end
$var wire 1 [# inputWithGap [7] $end
$var wire 1 \# inputWithGap [6] $end
$var wire 1 ]# inputWithGap [5] $end
$var wire 1 ^# inputWithGap [4] $end
$var wire 1 _# inputWithGap [3] $end
$var wire 1 `# inputWithGap [2] $end
$var wire 1 a# inputWithGap [1] $end
$var wire 1 b# inputWithGap [0] $end
$var reg 3 H$ outputNumber [2:0] $end
$var integer 32 I$ i $end
$upscope $end
$upscope $end

$scope begin genloop[0] $end
$var parameter 32 J$ i $end

$scope module inst_indexExtraction $end
$var parameter 32 K$ NUM_INDEX $end
$var parameter 32 L$ BITWIDTH_INDEX $end
$var parameter 32 M$ BITWIDTH_NUMBER $end
$var wire 1 f# shiftList [23] $end
$var wire 1 g# shiftList [22] $end
$var wire 1 h# shiftList [21] $end
$var wire 1 i# shiftList [20] $end
$var wire 1 j# shiftList [19] $end
$var wire 1 k# shiftList [18] $end
$var wire 1 l# shiftList [17] $end
$var wire 1 m# shiftList [16] $end
$var wire 1 n# shiftList [15] $end
$var wire 1 o# shiftList [14] $end
$var wire 1 p# shiftList [13] $end
$var wire 1 q# shiftList [12] $end
$var wire 1 r# shiftList [11] $end
$var wire 1 s# shiftList [10] $end
$var wire 1 t# shiftList [9] $end
$var wire 1 u# shiftList [8] $end
$var wire 1 v# shiftList [7] $end
$var wire 1 w# shiftList [6] $end
$var wire 1 x# shiftList [5] $end
$var wire 1 y# shiftList [4] $end
$var wire 1 z# shiftList [3] $end
$var wire 1 {# shiftList [2] $end
$var wire 1 |# shiftList [1] $end
$var wire 1 }# shiftList [0] $end
$var wire 1 N# inputWithGap [23] $end
$var wire 1 O# inputWithGap [22] $end
$var wire 1 P# inputWithGap [21] $end
$var wire 1 Q# inputWithGap [20] $end
$var wire 1 R# inputWithGap [19] $end
$var wire 1 S# inputWithGap [18] $end
$var wire 1 T# inputWithGap [17] $end
$var wire 1 U# inputWithGap [16] $end
$var wire 1 V# inputWithGap [15] $end
$var wire 1 W# inputWithGap [14] $end
$var wire 1 X# inputWithGap [13] $end
$var wire 1 Y# inputWithGap [12] $end
$var wire 1 Z# inputWithGap [11] $end
$var wire 1 [# inputWithGap [10] $end
$var wire 1 \# inputWithGap [9] $end
$var wire 1 ]# inputWithGap [8] $end
$var wire 1 ^# inputWithGap [7] $end
$var wire 1 _# inputWithGap [6] $end
$var wire 1 `# inputWithGap [5] $end
$var wire 1 a# inputWithGap [4] $end
$var wire 1 b# inputWithGap [3] $end
$var wire 1 c# inputWithGap [2] $end
$var wire 1 d# inputWithGap [1] $end
$var wire 1 e# inputWithGap [0] $end
$var reg 3 N$ outputNumber [2:0] $end
$var integer 32 O$ i $end
$upscope $end
$upscope $end
$upscope $end

$scope module inst_collapseBubble_weight $end
$var parameter 32 P$ BITMASK_LENGTH $end
$var parameter 32 Q$ BITWIDTH_INDEX $end
$var parameter 32 R$ BITWIDTH_NUMBER $end
$var wire 1 S$ inputWithGap [23] $end
$var wire 1 T$ inputWithGap [22] $end
$var wire 1 U$ inputWithGap [21] $end
$var wire 1 V$ inputWithGap [20] $end
$var wire 1 W$ inputWithGap [19] $end
$var wire 1 X$ inputWithGap [18] $end
$var wire 1 Y$ inputWithGap [17] $end
$var wire 1 Z$ inputWithGap [16] $end
$var wire 1 [$ inputWithGap [15] $end
$var wire 1 \$ inputWithGap [14] $end
$var wire 1 ]$ inputWithGap [13] $end
$var wire 1 ^$ inputWithGap [12] $end
$var wire 1 _$ inputWithGap [11] $end
$var wire 1 `$ inputWithGap [10] $end
$var wire 1 a$ inputWithGap [9] $end
$var wire 1 b$ inputWithGap [8] $end
$var wire 1 c$ inputWithGap [7] $end
$var wire 1 d$ inputWithGap [6] $end
$var wire 1 e$ inputWithGap [5] $end
$var wire 1 f$ inputWithGap [4] $end
$var wire 1 g$ inputWithGap [3] $end
$var wire 1 h$ inputWithGap [2] $end
$var wire 1 i$ inputWithGap [1] $end
$var wire 1 j$ inputWithGap [0] $end
$var wire 1 k$ positions [23] $end
$var wire 1 l$ positions [22] $end
$var wire 1 m$ positions [21] $end
$var wire 1 n$ positions [20] $end
$var wire 1 o$ positions [19] $end
$var wire 1 p$ positions [18] $end
$var wire 1 q$ positions [17] $end
$var wire 1 r$ positions [16] $end
$var wire 1 s$ positions [15] $end
$var wire 1 t$ positions [14] $end
$var wire 1 u$ positions [13] $end
$var wire 1 v$ positions [12] $end
$var wire 1 w$ positions [11] $end
$var wire 1 x$ positions [10] $end
$var wire 1 y$ positions [9] $end
$var wire 1 z$ positions [8] $end
$var wire 1 {$ positions [7] $end
$var wire 1 |$ positions [6] $end
$var wire 1 }$ positions [5] $end
$var wire 1 ~$ positions [4] $end
$var wire 1 !% positions [3] $end
$var wire 1 "% positions [2] $end
$var wire 1 #% positions [1] $end
$var wire 1 $% positions [0] $end
$var wire 1 m" outputWithoutGap [23] $end
$var wire 1 n" outputWithoutGap [22] $end
$var wire 1 o" outputWithoutGap [21] $end
$var wire 1 p" outputWithoutGap [20] $end
$var wire 1 q" outputWithoutGap [19] $end
$var wire 1 r" outputWithoutGap [18] $end
$var wire 1 s" outputWithoutGap [17] $end
$var wire 1 t" outputWithoutGap [16] $end
$var wire 1 u" outputWithoutGap [15] $end
$var wire 1 v" outputWithoutGap [14] $end
$var wire 1 w" outputWithoutGap [13] $end
$var wire 1 x" outputWithoutGap [12] $end
$var wire 1 y" outputWithoutGap [11] $end
$var wire 1 z" outputWithoutGap [10] $end
$var wire 1 {" outputWithoutGap [9] $end
$var wire 1 |" outputWithoutGap [8] $end
$var wire 1 }" outputWithoutGap [7] $end
$var wire 1 ~" outputWithoutGap [6] $end
$var wire 1 !# outputWithoutGap [5] $end
$var wire 1 "# outputWithoutGap [4] $end
$var wire 1 ## outputWithoutGap [3] $end
$var wire 1 $# outputWithoutGap [2] $end
$var wire 1 %# outputWithoutGap [1] $end
$var wire 1 &# outputWithoutGap [0] $end

$scope begin genloop[7] $end
$var parameter 32 %% i $end

$scope module inst_indexExtraction $end
$var parameter 32 &% NUM_INDEX $end
$var parameter 32 '% BITWIDTH_INDEX $end
$var parameter 32 (% BITWIDTH_NUMBER $end
$var wire 1 k$ shiftList [2] $end
$var wire 1 l$ shiftList [1] $end
$var wire 1 m$ shiftList [0] $end
$var wire 1 S$ inputWithGap [2] $end
$var wire 1 T$ inputWithGap [1] $end
$var wire 1 U$ inputWithGap [0] $end
$var reg 3 )% outputNumber [2:0] $end
$var integer 32 *% i $end
$upscope $end
$upscope $end

$scope begin genloop[6] $end
$var parameter 32 +% i $end

$scope module inst_indexExtraction $end
$var parameter 32 ,% NUM_INDEX $end
$var parameter 32 -% BITWIDTH_INDEX $end
$var parameter 32 .% BITWIDTH_NUMBER $end
$var wire 1 k$ shiftList [5] $end
$var wire 1 l$ shiftList [4] $end
$var wire 1 m$ shiftList [3] $end
$var wire 1 n$ shiftList [2] $end
$var wire 1 o$ shiftList [1] $end
$var wire 1 p$ shiftList [0] $end
$var wire 1 S$ inputWithGap [5] $end
$var wire 1 T$ inputWithGap [4] $end
$var wire 1 U$ inputWithGap [3] $end
$var wire 1 V$ inputWithGap [2] $end
$var wire 1 W$ inputWithGap [1] $end
$var wire 1 X$ inputWithGap [0] $end
$var reg 3 /% outputNumber [2:0] $end
$var integer 32 0% i $end
$upscope $end
$upscope $end

$scope begin genloop[5] $end
$var parameter 32 1% i $end

$scope module inst_indexExtraction $end
$var parameter 32 2% NUM_INDEX $end
$var parameter 32 3% BITWIDTH_INDEX $end
$var parameter 32 4% BITWIDTH_NUMBER $end
$var wire 1 k$ shiftList [8] $end
$var wire 1 l$ shiftList [7] $end
$var wire 1 m$ shiftList [6] $end
$var wire 1 n$ shiftList [5] $end
$var wire 1 o$ shiftList [4] $end
$var wire 1 p$ shiftList [3] $end
$var wire 1 q$ shiftList [2] $end
$var wire 1 r$ shiftList [1] $end
$var wire 1 s$ shiftList [0] $end
$var wire 1 S$ inputWithGap [8] $end
$var wire 1 T$ inputWithGap [7] $end
$var wire 1 U$ inputWithGap [6] $end
$var wire 1 V$ inputWithGap [5] $end
$var wire 1 W$ inputWithGap [4] $end
$var wire 1 X$ inputWithGap [3] $end
$var wire 1 Y$ inputWithGap [2] $end
$var wire 1 Z$ inputWithGap [1] $end
$var wire 1 [$ inputWithGap [0] $end
$var reg 3 5% outputNumber [2:0] $end
$var integer 32 6% i $end
$upscope $end
$upscope $end

$scope begin genloop[4] $end
$var parameter 32 7% i $end

$scope module inst_indexExtraction $end
$var parameter 32 8% NUM_INDEX $end
$var parameter 32 9% BITWIDTH_INDEX $end
$var parameter 32 :% BITWIDTH_NUMBER $end
$var wire 1 k$ shiftList [11] $end
$var wire 1 l$ shiftList [10] $end
$var wire 1 m$ shiftList [9] $end
$var wire 1 n$ shiftList [8] $end
$var wire 1 o$ shiftList [7] $end
$var wire 1 p$ shiftList [6] $end
$var wire 1 q$ shiftList [5] $end
$var wire 1 r$ shiftList [4] $end
$var wire 1 s$ shiftList [3] $end
$var wire 1 t$ shiftList [2] $end
$var wire 1 u$ shiftList [1] $end
$var wire 1 v$ shiftList [0] $end
$var wire 1 S$ inputWithGap [11] $end
$var wire 1 T$ inputWithGap [10] $end
$var wire 1 U$ inputWithGap [9] $end
$var wire 1 V$ inputWithGap [8] $end
$var wire 1 W$ inputWithGap [7] $end
$var wire 1 X$ inputWithGap [6] $end
$var wire 1 Y$ inputWithGap [5] $end
$var wire 1 Z$ inputWithGap [4] $end
$var wire 1 [$ inputWithGap [3] $end
$var wire 1 \$ inputWithGap [2] $end
$var wire 1 ]$ inputWithGap [1] $end
$var wire 1 ^$ inputWithGap [0] $end
$var reg 3 ;% outputNumber [2:0] $end
$var integer 32 <% i $end
$upscope $end
$upscope $end

$scope begin genloop[3] $end
$var parameter 32 =% i $end

$scope module inst_indexExtraction $end
$var parameter 32 >% NUM_INDEX $end
$var parameter 32 ?% BITWIDTH_INDEX $end
$var parameter 32 @% BITWIDTH_NUMBER $end
$var wire 1 k$ shiftList [14] $end
$var wire 1 l$ shiftList [13] $end
$var wire 1 m$ shiftList [12] $end
$var wire 1 n$ shiftList [11] $end
$var wire 1 o$ shiftList [10] $end
$var wire 1 p$ shiftList [9] $end
$var wire 1 q$ shiftList [8] $end
$var wire 1 r$ shiftList [7] $end
$var wire 1 s$ shiftList [6] $end
$var wire 1 t$ shiftList [5] $end
$var wire 1 u$ shiftList [4] $end
$var wire 1 v$ shiftList [3] $end
$var wire 1 w$ shiftList [2] $end
$var wire 1 x$ shiftList [1] $end
$var wire 1 y$ shiftList [0] $end
$var wire 1 S$ inputWithGap [14] $end
$var wire 1 T$ inputWithGap [13] $end
$var wire 1 U$ inputWithGap [12] $end
$var wire 1 V$ inputWithGap [11] $end
$var wire 1 W$ inputWithGap [10] $end
$var wire 1 X$ inputWithGap [9] $end
$var wire 1 Y$ inputWithGap [8] $end
$var wire 1 Z$ inputWithGap [7] $end
$var wire 1 [$ inputWithGap [6] $end
$var wire 1 \$ inputWithGap [5] $end
$var wire 1 ]$ inputWithGap [4] $end
$var wire 1 ^$ inputWithGap [3] $end
$var wire 1 _$ inputWithGap [2] $end
$var wire 1 `$ inputWithGap [1] $end
$var wire 1 a$ inputWithGap [0] $end
$var reg 3 A% outputNumber [2:0] $end
$var integer 32 B% i $end
$upscope $end
$upscope $end

$scope begin genloop[2] $end
$var parameter 32 C% i $end

$scope module inst_indexExtraction $end
$var parameter 32 D% NUM_INDEX $end
$var parameter 32 E% BITWIDTH_INDEX $end
$var parameter 32 F% BITWIDTH_NUMBER $end
$var wire 1 k$ shiftList [17] $end
$var wire 1 l$ shiftList [16] $end
$var wire 1 m$ shiftList [15] $end
$var wire 1 n$ shiftList [14] $end
$var wire 1 o$ shiftList [13] $end
$var wire 1 p$ shiftList [12] $end
$var wire 1 q$ shiftList [11] $end
$var wire 1 r$ shiftList [10] $end
$var wire 1 s$ shiftList [9] $end
$var wire 1 t$ shiftList [8] $end
$var wire 1 u$ shiftList [7] $end
$var wire 1 v$ shiftList [6] $end
$var wire 1 w$ shiftList [5] $end
$var wire 1 x$ shiftList [4] $end
$var wire 1 y$ shiftList [3] $end
$var wire 1 z$ shiftList [2] $end
$var wire 1 {$ shiftList [1] $end
$var wire 1 |$ shiftList [0] $end
$var wire 1 S$ inputWithGap [17] $end
$var wire 1 T$ inputWithGap [16] $end
$var wire 1 U$ inputWithGap [15] $end
$var wire 1 V$ inputWithGap [14] $end
$var wire 1 W$ inputWithGap [13] $end
$var wire 1 X$ inputWithGap [12] $end
$var wire 1 Y$ inputWithGap [11] $end
$var wire 1 Z$ inputWithGap [10] $end
$var wire 1 [$ inputWithGap [9] $end
$var wire 1 \$ inputWithGap [8] $end
$var wire 1 ]$ inputWithGap [7] $end
$var wire 1 ^$ inputWithGap [6] $end
$var wire 1 _$ inputWithGap [5] $end
$var wire 1 `$ inputWithGap [4] $end
$var wire 1 a$ inputWithGap [3] $end
$var wire 1 b$ inputWithGap [2] $end
$var wire 1 c$ inputWithGap [1] $end
$var wire 1 d$ inputWithGap [0] $end
$var reg 3 G% outputNumber [2:0] $end
$var integer 32 H% i $end
$upscope $end
$upscope $end

$scope begin genloop[1] $end
$var parameter 32 I% i $end

$scope module inst_indexExtraction $end
$var parameter 32 J% NUM_INDEX $end
$var parameter 32 K% BITWIDTH_INDEX $end
$var parameter 32 L% BITWIDTH_NUMBER $end
$var wire 1 k$ shiftList [20] $end
$var wire 1 l$ shiftList [19] $end
$var wire 1 m$ shiftList [18] $end
$var wire 1 n$ shiftList [17] $end
$var wire 1 o$ shiftList [16] $end
$var wire 1 p$ shiftList [15] $end
$var wire 1 q$ shiftList [14] $end
$var wire 1 r$ shiftList [13] $end
$var wire 1 s$ shiftList [12] $end
$var wire 1 t$ shiftList [11] $end
$var wire 1 u$ shiftList [10] $end
$var wire 1 v$ shiftList [9] $end
$var wire 1 w$ shiftList [8] $end
$var wire 1 x$ shiftList [7] $end
$var wire 1 y$ shiftList [6] $end
$var wire 1 z$ shiftList [5] $end
$var wire 1 {$ shiftList [4] $end
$var wire 1 |$ shiftList [3] $end
$var wire 1 }$ shiftList [2] $end
$var wire 1 ~$ shiftList [1] $end
$var wire 1 !% shiftList [0] $end
$var wire 1 S$ inputWithGap [20] $end
$var wire 1 T$ inputWithGap [19] $end
$var wire 1 U$ inputWithGap [18] $end
$var wire 1 V$ inputWithGap [17] $end
$var wire 1 W$ inputWithGap [16] $end
$var wire 1 X$ inputWithGap [15] $end
$var wire 1 Y$ inputWithGap [14] $end
$var wire 1 Z$ inputWithGap [13] $end
$var wire 1 [$ inputWithGap [12] $end
$var wire 1 \$ inputWithGap [11] $end
$var wire 1 ]$ inputWithGap [10] $end
$var wire 1 ^$ inputWithGap [9] $end
$var wire 1 _$ inputWithGap [8] $end
$var wire 1 `$ inputWithGap [7] $end
$var wire 1 a$ inputWithGap [6] $end
$var wire 1 b$ inputWithGap [5] $end
$var wire 1 c$ inputWithGap [4] $end
$var wire 1 d$ inputWithGap [3] $end
$var wire 1 e$ inputWithGap [2] $end
$var wire 1 f$ inputWithGap [1] $end
$var wire 1 g$ inputWithGap [0] $end
$var reg 3 M% outputNumber [2:0] $end
$var integer 32 N% i $end
$upscope $end
$upscope $end

$scope begin genloop[0] $end
$var parameter 32 O% i $end

$scope module inst_indexExtraction $end
$var parameter 32 P% NUM_INDEX $end
$var parameter 32 Q% BITWIDTH_INDEX $end
$var parameter 32 R% BITWIDTH_NUMBER $end
$var wire 1 k$ shiftList [23] $end
$var wire 1 l$ shiftList [22] $end
$var wire 1 m$ shiftList [21] $end
$var wire 1 n$ shiftList [20] $end
$var wire 1 o$ shiftList [19] $end
$var wire 1 p$ shiftList [18] $end
$var wire 1 q$ shiftList [17] $end
$var wire 1 r$ shiftList [16] $end
$var wire 1 s$ shiftList [15] $end
$var wire 1 t$ shiftList [14] $end
$var wire 1 u$ shiftList [13] $end
$var wire 1 v$ shiftList [12] $end
$var wire 1 w$ shiftList [11] $end
$var wire 1 x$ shiftList [10] $end
$var wire 1 y$ shiftList [9] $end
$var wire 1 z$ shiftList [8] $end
$var wire 1 {$ shiftList [7] $end
$var wire 1 |$ shiftList [6] $end
$var wire 1 }$ shiftList [5] $end
$var wire 1 ~$ shiftList [4] $end
$var wire 1 !% shiftList [3] $end
$var wire 1 "% shiftList [2] $end
$var wire 1 #% shiftList [1] $end
$var wire 1 $% shiftList [0] $end
$var wire 1 S$ inputWithGap [23] $end
$var wire 1 T$ inputWithGap [22] $end
$var wire 1 U$ inputWithGap [21] $end
$var wire 1 V$ inputWithGap [20] $end
$var wire 1 W$ inputWithGap [19] $end
$var wire 1 X$ inputWithGap [18] $end
$var wire 1 Y$ inputWithGap [17] $end
$var wire 1 Z$ inputWithGap [16] $end
$var wire 1 [$ inputWithGap [15] $end
$var wire 1 \$ inputWithGap [14] $end
$var wire 1 ]$ inputWithGap [13] $end
$var wire 1 ^$ inputWithGap [12] $end
$var wire 1 _$ inputWithGap [11] $end
$var wire 1 `$ inputWithGap [10] $end
$var wire 1 a$ inputWithGap [9] $end
$var wire 1 b$ inputWithGap [8] $end
$var wire 1 c$ inputWithGap [7] $end
$var wire 1 d$ inputWithGap [6] $end
$var wire 1 e$ inputWithGap [5] $end
$var wire 1 f$ inputWithGap [4] $end
$var wire 1 g$ inputWithGap [3] $end
$var wire 1 h$ inputWithGap [2] $end
$var wire 1 i$ inputWithGap [1] $end
$var wire 1 j$ inputWithGap [0] $end
$var reg 3 S% outputNumber [2:0] $end
$var integer 32 T% i $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
0"
bx #
bx $
bx %
b0 $!
b0 %!
b0 &!
b0 '!
b0 (!
b0 )!
b0 *!
bx -#
bx 1#
bx 5#
bx 9#
bx =#
b0 I#
b0 N$
b0 H$
b0 B$
b0 <$
b0 6$
b0 0$
b0 *$
b0 $$
b0 S%
b0 M%
b0 G%
b0 A%
b0 ;%
b0 5%
b0 /%
b0 )%
b1000 h
b11 i
b11000 j
b100 k
b1000 +#
b11 ,#
b1000 /#
b11 0#
b1000 3#
b11 4#
b1000 7#
b11 8#
b1000 ;#
b11 <#
b1000 ?#
b100 @#
b1000 K#
b11 L#
b11 M#
b1000 P$
b11 Q$
b11 R$
b0 J$
b1000 K$
b11 L$
b11 M$
b1 D$
b111 E$
b11 F$
b11 G$
b10 >$
b110 ?$
b11 @$
b11 A$
b11 8$
b101 9$
b11 :$
b11 ;$
b100 2$
b100 3$
b11 4$
b11 5$
b101 ,$
b11 -$
b11 .$
b11 /$
b110 &$
b10 '$
b11 ($
b11 )$
b111 ~#
b1 !$
b11 "$
b11 #$
b0 O%
b1000 P%
b11 Q%
b11 R%
b1 I%
b111 J%
b11 K%
b11 L%
b10 C%
b110 D%
b11 E%
b11 F%
b11 =%
b101 >%
b11 ?%
b11 @%
b100 7%
b100 8%
b11 9%
b11 :%
b101 1%
b11 2%
b11 3%
b11 4%
b110 +%
b10 ,%
b11 -%
b11 .%
b111 %%
b1 &%
b11 '%
b11 (%
b10000000000000000000000000000011 f
bx .#
bx 2#
bx 6#
bx :#
bx >#
b1000 J#
b1000 O$
b111 I$
b110 C$
b101 =$
b100 7$
b11 1$
b10 +$
b1 %$
b1000 T%
b111 N%
b110 H%
b101 B%
b100 <%
b11 6%
b10 0%
b1 *%
b0 g
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
x$"
x#"
x""
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
xn!
xm!
xl!
xk!
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0*#
0)#
0(#
0'#
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
0m
0l
zn
zo
1p
1q
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
$end
#5000
1"
1!
1m
1l
bx $!
bx %!
bx &!
bx '!
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
b0x I#
b1 J#
b0xxxx000x I#
b10 J#
b0xxxxxxxx000x I#
b11 J#
b0xxxxxxxxxxxx000x I#
b100 J#
b0xxxxxxxxxxxxxxxx000x I#
b101 J#
b0xxxxxxxxxxxxxxxxxxxx000x I#
b110 J#
b0xxxxxxxxxxxxxxxxxxxxxxxx000x I#
b111 J#
bx000x I#
b1000 J#
b0 %$
b1 %$
b0 +$
b1 +$
b10 +$
b0 1$
b1 1$
b10 1$
b11 1$
b0 7$
b1 7$
b10 7$
b11 7$
b100 7$
b0 =$
b1 =$
b10 =$
b11 =$
b100 =$
b101 =$
b0 C$
b1 C$
b10 C$
b11 C$
b100 C$
b101 C$
b110 C$
b0 I$
b1 I$
b10 I$
b11 I$
b100 I$
b101 I$
b110 I$
b111 I$
b0 O$
b1 O$
b10 O$
b11 O$
b100 O$
b101 O$
b110 O$
b111 O$
b1000 O$
b0 *%
b1 *%
b0 0%
b1 0%
b10 0%
b0 6%
b1 6%
b10 6%
b11 6%
b0 <%
b1 <%
b10 <%
b11 <%
b100 <%
b0 B%
b1 B%
b10 B%
b11 B%
b100 B%
b101 B%
b0 H%
b1 H%
b10 H%
b11 H%
b100 H%
b101 H%
b110 H%
b0 N%
b1 N%
b10 N%
b11 N%
b100 N%
b101 N%
b110 N%
b111 N%
b0 T%
b1 T%
b10 T%
b11 T%
b100 T%
b101 T%
b110 T%
b111 T%
b1000 T%
x*#
x)#
x(#
x'#
#10000
b0 $
b0 #
b0 %
0!
0y
0x
0w
0v
0u
0t
0s
0r
0#!
0"!
0!!
0~
0}
0|
0{
0z
0l
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
1:!
19!
18!
17!
16!
15!
14!
13!
bx000 -#
b1 .#
bx001000 -#
b10 .#
bx010001000 -#
b11 .#
bx011010001000 -#
b100 .#
bx100011010001000 -#
b101 .#
bx101100011010001000 -#
b110 .#
bx110101100011010001000 -#
b111 .#
b111110101100011010001000 -#
b1000 .#
b1000 :#
b0xxxxxxxxxxxxxxxxxxxxx 9#
b111 :#
b0xxxxxxxxxxxxxxxxxx 9#
b110 :#
b0xxxxxxxxxxxxxxx 9#
b101 :#
b0xxxxxxxxxxxx 9#
b100 :#
b0xxxxxxxxx 9#
b11 :#
b0xxxxxx 9#
b10 :#
b0xxx 9#
b1 :#
b0 9#
b0 :#
b1000 >#
b0xxxxxxxxxxxxxxxxxxxxx =#
b111 >#
b0xxxxxxxxxxxxxxxxxx =#
b110 >#
b0xxxxxxxxxxxxxxx =#
b101 >#
b0xxxxxxxxxxxx =#
b100 >#
b0xxxxxxxxx =#
b11 >#
b0xxxxxx =#
b10 >#
b0xxx =#
b1 >#
b0 =#
b0 >#
bx000 1#
b1 2#
bx000000 1#
b10 2#
bx000000000 1#
b11 2#
bx000000000000 1#
b100 2#
bx000000000000000 1#
b101 2#
bx000000000000000000 1#
b110 2#
bx000000000000000000000 1#
b111 2#
b0 1#
b1000 2#
bx000 5#
b1 6#
bx000000 5#
b10 6#
bx000000000 5#
b11 6#
bx000000000000 5#
b100 6#
bx000000000000000 5#
b101 6#
bx000000000000000000 5#
b110 6#
bx000000000000000000000 5#
b111 6#
b0 5#
b1000 6#
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0R!
0Q!
0P!
1O!
0N!
0M!
0L!
1K!
0J!
1I!
1H!
0G!
0F!
0E!
1D!
1C!
0B!
1A!
0@!
1?!
1>!
1=!
1<!
1;!
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0k!
0j!
0i!
0h!
0g!
0f!
0e!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
b1000 :#
b111 :#
b110 :#
b101 :#
b100 :#
b11 :#
b10 :#
b1 :#
b0 :#
b1000 >#
b111 >#
b110 >#
b101 >#
b100 >#
b11 >#
b10 >#
b1 >#
b0 >#
#15000
1!
1l
b0 $!
b111110101100011010001000 %!
b0 &!
b0 '!
bx *!
x5
x4
x3
x2
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0$%
0#%
0"%
1!%
0~$
0}$
0|$
1{$
0z$
1y$
1x$
0w$
0v$
0u$
1t$
1s$
0r$
1q$
0p$
1o$
1n$
1m$
1l$
1k$
0}#
0|#
0{#
1z#
0y#
0x#
0w#
1v#
0u#
1t#
1s#
0r#
0q#
0p#
1o#
1n#
0m#
1l#
0k#
1j#
1i#
1h#
1g#
1f#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
bx0000 I#
b1 J#
bx00000000 I#
b10 J#
bx000000000000 I#
b11 J#
bx0000000000000000 I#
b100 J#
bx00000000000000000000 I#
b101 J#
bx000000000000000000000000 I#
b110 J#
bx0000000000000000000000000000 I#
b111 J#
b0 I#
b1000 J#
b0 %$
b1 %$
b0 +$
b1 +$
b10 +$
b0 1$
b1 1$
b10 1$
b11 1$
b0 7$
b1 7$
b10 7$
b11 7$
b100 7$
b0 =$
b1 =$
b10 =$
b11 =$
b100 =$
b101 =$
b0 C$
b1 C$
b10 C$
b11 C$
b100 C$
b101 C$
b110 C$
b0 I$
b1 I$
b10 I$
b11 I$
b100 I$
b101 I$
b110 I$
b111 I$
b0 O$
b1 O$
b10 O$
b11 O$
b100 O$
b101 O$
b110 O$
b111 O$
b1000 O$
b0 *%
b1 *%
b0 0%
b1 0%
b10 0%
b0 6%
b1 6%
b10 6%
b11 6%
b0 <%
b1 <%
b10 <%
b11 <%
b100 <%
b0 B%
b1 B%
b10 B%
b11 B%
b100 B%
b101 B%
b0 H%
b1 H%
b10 H%
b11 H%
b100 H%
b101 H%
b110 H%
b0 N%
b1 N%
b10 N%
b11 N%
b100 N%
b101 N%
b110 N%
b111 N%
b0 T%
b1 T%
b10 T%
b11 T%
b100 T%
b101 T%
b110 T%
b111 T%
b1000 T%
0*#
0)#
0(#
0'#
#20000
0!
0l
#25000
1!
1l
b0 *!
05
04
03
02
#30000
b1 g
b11111111 $
b11111111 #
b1000111110101100011010001000111110101100011010001000 %
0!
1y
1x
1w
1v
1u
1t
1s
1r
1#!
1"!
1!!
1~
1}
1|
1{
1z
0l
12!
11!
10!
1/!
1.!
1-!
1,!
1+!
0:!
09!
08!
07!
06!
05!
04!
03!
b1 .#
b111110101100011010000000 -#
b10 .#
b111110101100011000000000 -#
b11 .#
b111110101100000000000000 -#
b100 .#
b111110101000000000000000 -#
b101 .#
b111110000000000000000000 -#
b110 .#
b111000000000000000000000 -#
b111 .#
b0 -#
b1000 .#
b1000 :#
b111 :#
b110 :#
b101 :#
b100 :#
b11 :#
b10 :#
b1 :#
b0 :#
b1000 >#
b111 >#
b110 >#
b101 >#
b100 >#
b11 >#
b10 >#
b1 >#
b0 >#
b1 2#
b1000 1#
b10 2#
b10001000 1#
b11 2#
b11010001000 1#
b100 2#
b100011010001000 1#
b101 2#
b101100011010001000 1#
b110 2#
b110101100011010001000 1#
b111 2#
b111110101100011010001000 1#
b1000 2#
b1 6#
b1000 5#
b10 6#
b10001000 5#
b11 6#
b11010001000 5#
b100 6#
b100011010001000 5#
b101 6#
b101100011010001000 5#
b110 6#
b110101100011010001000 5#
b111 6#
b111110101100011010001000 5#
b1000 6#
0O!
0K!
0I!
0H!
0D!
0C!
0A!
0?!
0>!
0=!
0<!
0;!
1!"
1{!
1y!
1x!
1t!
1s!
1q!
1o!
1n!
1m!
1l!
1k!
1g!
1c!
1a!
1`!
1\!
1[!
1Y!
1W!
1V!
1U!
1T!
1S!
b1000 :#
b111000000000000000000000 9#
b111 :#
b111110000000000000000000 9#
b110 :#
b111110101000000000000000 9#
b101 :#
b111110101100000000000000 9#
b100 :#
b111110101100011000000000 9#
b11 :#
b111110101100011010000000 9#
b10 :#
b111110101100011010001000 9#
b1 :#
b0 :#
b1000 >#
b111000000000000000000000 =#
b111 >#
b111110000000000000000000 =#
b110 >#
b111110101000000000000000 =#
b101 >#
b111110101100000000000000 =#
b100 >#
b111110101100011000000000 =#
b11 >#
b111110101100011010000000 =#
b10 >#
b111110101100011010001000 =#
b1 >#
b0 >#
1Q"
1M"
1K"
1J"
1F"
1E"
1C"
1A"
1@"
1?"
1>"
1="
19"
15"
13"
12"
1."
1-"
1+"
1)"
1("
1'"
1&"
1%"
#35000
1!
1l
b11111111 $!
b0 %!
b111110101100011010001000 &!
b111110101100011010001000 '!
1g$
1c$
1a$
1`$
1\$
1[$
1Y$
1W$
1V$
1U$
1T$
1S$
1b#
1^#
1\#
1[#
1W#
1V#
1T#
1R#
1Q#
1P#
1O#
1N#
0!%
0{$
0y$
0x$
0t$
0s$
0q$
0o$
0n$
0m$
0l$
0k$
0z#
0v#
0t#
0s#
0o#
0n#
0l#
0j#
0i#
0h#
0g#
0f#
1H#
1G#
1F#
1E#
1D#
1C#
1B#
1A#
b1 I#
b1 J#
b100001 I#
b10 J#
b1100100001 I#
b11 J#
b100001100100001 I#
b100 J#
b1010100001100100001 I#
b101 J#
b11001010100001100100001 I#
b110 J#
b111011001010100001100100001 I#
b111 J#
b10000111011001010100001100100001 I#
b1000 J#
b0 %$
b111 $$
b1 %$
b0 +$
b110 *$
b1 +$
b10 +$
b0 1$
b101 0$
b1 1$
b10 1$
b11 1$
b0 7$
b100 6$
b1 7$
b10 7$
b11 7$
b100 7$
b0 =$
b11 <$
b1 =$
b10 =$
b11 =$
b100 =$
b101 =$
b0 C$
b10 B$
b1 C$
b10 C$
b11 C$
b100 C$
b101 C$
b110 C$
b0 O$
b1 O$
b10 O$
b11 O$
b100 O$
b101 O$
b110 O$
b111 O$
b1000 O$
b0 I$
b1 H$
b1 I$
b10 I$
b11 I$
b100 I$
b101 I$
b110 I$
b111 I$
b0 *%
b111 )%
b1 *%
b0 0%
b110 /%
b1 0%
b10 0%
b0 6%
b101 5%
b1 6%
b10 6%
b11 6%
b0 <%
b100 ;%
b1 <%
b10 <%
b11 <%
b100 <%
b0 B%
b11 A%
b1 B%
b10 B%
b11 B%
b100 B%
b101 B%
b0 H%
b10 G%
b1 H%
b10 H%
b11 H%
b100 H%
b101 H%
b110 H%
b0 T%
b1 T%
b10 T%
b11 T%
b100 T%
b101 T%
b110 T%
b111 T%
b1000 T%
b0 N%
b1 M%
b1 N%
b10 N%
b11 N%
b100 N%
b101 N%
b110 N%
b111 N%
1##
1}"
1{"
1z"
1v"
1u"
1s"
1q"
1p"
1o"
1n"
1m"
1i"
1e"
1c"
1b"
1^"
1]"
1["
1Y"
1X"
1W"
1V"
1U"
1'#
#40000
0!
0l
#45000
1!
1l
b111110101100011010001000 (!
b111110101100011010001000 )!
b1000 *!
1b
1^
1\
1[
1W
1V
1T
1R
1Q
1P
1O
1N
1J
1F
1D
1C
1?
1>
1<
1:
19
18
17
16
12
#50000
b10 g
b1111 $
b11110000 #
b0 %
0!
0y
0x
0w
0v
0}
0|
0{
0z
0l
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
1:!
19!
18!
17!
16!
15!
14!
13!
b1 .#
b1000 -#
b10 .#
b10001000 -#
b11 .#
b11010001000 -#
b100 .#
b100011010001000 -#
b101 .#
b101100011010001000 -#
b110 .#
b110101100011010001000 -#
b111 .#
b111110101100011010001000 -#
b1000 .#
b1000 :#
b110101100011010001000 9#
b111 :#
b101100011010001000 9#
b110 :#
b100011010001000 9#
b101 :#
b11010001000 9#
b100 :#
b10001000 9#
b11 :#
b1000 9#
b10 :#
b0 9#
b1 :#
b0 :#
b1000 >#
b110101100011010001000 =#
b111 >#
b101100011010001000 =#
b110 >#
b100011010001000 =#
b101 >#
b11010001000 =#
b100 >#
b10001000 =#
b11 >#
b1000 =#
b10 >#
b0 =#
b1 >#
b0 >#
b1 2#
b10 2#
b11 2#
b100 2#
b101 2#
b111110100100011010001000 1#
b110 2#
b111100100100011010001000 1#
b111 2#
b100100100100011010001000 1#
b1000 2#
b1 6#
b111110101100011010000000 5#
b10 6#
b111110101100011000000000 5#
b11 6#
b111110101100000000000000 5#
b100 6#
b111110101000000000000000 5#
b101 6#
b111110001000000000000000 5#
b110 6#
b111010001000000000000000 5#
b111 6#
b11010001000000000000000 5#
b1000 6#
0Q"
0M"
0K"
0J"
0F"
0E"
0C"
0A"
0@"
0?"
0>"
0="
09"
05"
03"
02"
0."
0-"
0+"
0)"
0("
0'"
0&"
0%"
1O!
1K!
1I!
1H!
1D!
1C!
1A!
1?!
1>!
1=!
1<!
1;!
0!"
0{!
0y!
0x!
0t!
0q!
0n!
0k!
0[!
0W!
0U!
0T!
b1000 :#
b111 :#
b110 :#
b101 :#
b100 :#
b11 :#
b10 :#
b1 :#
b0 :#
b1000 >#
b111 >#
b110 >#
b101 >#
b100 >#
b11 >#
b10 >#
b1 >#
b0 >#
#55000
1!
1l
b0 $!
b111110101100011010001000 %!
b0 &!
b0 '!
0g$
0c$
0a$
0`$
0\$
0[$
0Y$
0W$
0V$
0U$
0T$
0S$
0b#
0^#
0\#
0[#
0W#
0V#
0T#
0R#
0Q#
0P#
0O#
0N#
1!%
1{$
1y$
1x$
1t$
1s$
1q$
1o$
1n$
1m$
1l$
1k$
1z#
1v#
1t#
1s#
1o#
1n#
1l#
1j#
1i#
1h#
1g#
1f#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
b10000111011001010100001100100000 I#
b1 J#
b10000111011001010100001100000000 I#
b10 J#
b10000111011001010100000000000000 I#
b11 J#
b10000111011001010000000000000000 I#
b100 J#
b10000111011000000000000000000000 I#
b101 J#
b10000111000000000000000000000000 I#
b110 J#
b10000000000000000000000000000000 I#
b111 J#
b0 I#
b1000 J#
b0 $$
b0 %$
b1 %$
b0 *$
b0 +$
b1 +$
b10 +$
b0 0$
b0 1$
b1 1$
b10 1$
b11 1$
b0 6$
b0 7$
b1 7$
b10 7$
b11 7$
b100 7$
b0 <$
b0 =$
b1 =$
b10 =$
b11 =$
b100 =$
b101 =$
b0 B$
b0 C$
b1 C$
b10 C$
b11 C$
b100 C$
b101 C$
b110 C$
b0 O$
b1 O$
b10 O$
b11 O$
b100 O$
b101 O$
b110 O$
b111 O$
b1000 O$
b0 H$
b0 I$
b1 I$
b10 I$
b11 I$
b100 I$
b101 I$
b110 I$
b111 I$
b0 )%
b0 *%
b1 *%
b0 /%
b0 0%
b1 0%
b10 0%
b0 5%
b0 6%
b1 6%
b10 6%
b11 6%
b0 ;%
b0 <%
b1 <%
b10 <%
b11 <%
b100 <%
b0 A%
b0 B%
b1 B%
b10 B%
b11 B%
b100 B%
b101 B%
b0 G%
b0 H%
b1 H%
b10 H%
b11 H%
b100 H%
b101 H%
b110 H%
b0 T%
b1 T%
b10 T%
b11 T%
b100 T%
b101 T%
b110 T%
b111 T%
b1000 T%
b0 M%
b0 N%
b1 N%
b10 N%
b11 N%
b100 N%
b101 N%
b110 N%
b111 N%
0##
0}"
0{"
0z"
0v"
0u"
0s"
0q"
0p"
0o"
0n"
0m"
0i"
0e"
0c"
0b"
0^"
0]"
0["
0Y"
0X"
0W"
0V"
0U"
0'#
#60000
0!
0l
#65000
1!
1l
b0 (!
b0 )!
b0 *!
0b
0^
0\
0[
0W
0V
0T
0R
0Q
0P
0O
0N
0J
0F
0D
0C
0?
0>
0<
0:
09
08
07
06
02
#70000
b11 g
b10100101 $
b10101010 #
b10000000000000000000011010000000000000000000011010 %
0!
1x
1v
0u
0s
0"!
0~
1|
1z
0l
1-!
1+!
05!
03!
b1 .#
b10 .#
b11 .#
b100 .#
b101 .#
b110 .#
b111101101100011010001000 -#
b111 .#
b110101101100011010001000 -#
b1000 .#
b1000 :#
b100000000000000000000000 9#
b111 :#
b110 :#
b100000100000000000000000 9#
b101 :#
b100 :#
b11 :#
b10 :#
b1 :#
b0 :#
b1000 >#
b11000000000000000000000 =#
b111 >#
b110 >#
b11000001000000000000000 =#
b101 >#
b100 >#
b11 >#
b10 >#
b1 >#
b0 >#
b1 2#
b10 2#
b100100100100011001001000 1#
b11 2#
b100100100100010001001000 1#
b100 2#
b100100100010010001001000 1#
b101 2#
b100100010010010001001000 1#
b110 2#
b100011010010010001001000 1#
b111 2#
b11011010010010001001000 1#
b1000 2#
b1 6#
b10 6#
b11010001000000001000000 5#
b11 6#
b11010001000001001000000 5#
b100 6#
b11010001010001001000000 5#
b101 6#
b11010010010001001000000 5#
b110 6#
b11011010010001001000000 5#
b111 6#
b1000 6#
1E"
1?"
1>"
1+"
1%"
1@!
0?!
0=!
1|!
1y!
1u!
0s!
1r!
1p!
1d!
0c!
0a!
1]!
0\!
1Z!
0Y!
1X!
1W!
0V!
1U!
1T!
0S!
b1000 :#
b11000100000000000000000 9#
b111 :#
b110 :#
b11000010000000000000000 9#
b101 :#
b100 :#
b11 :#
b10 :#
b1 :#
b0 :#
b1000 >#
b111 >#
b110 >#
b11000010000000000000000 =#
b101 >#
b100 >#
b11 >#
b10 >#
b1 >#
b0 >#
0E"
1D"
1,"
0+"
1'"
1&"
0%"
#75000
1!
1l
b10100000 $!
b110101101100011010001000 %!
b11000010000000000000000 &!
b11000010000000000000000 '!
1Z$
1U$
1T$
1U#
1P#
1O#
1p$
0o$
0m$
1k#
0j#
0h#
1C#
1A#
b1 J#
b10 J#
b11 J#
b100 J#
b101 J#
b100000000000000000000 I#
b110 J#
b1000100000000000000000000 I#
b111 J#
b100001000100000000000000000000 I#
b1000 J#
b0 +$
b1 +$
b10 +$
b0 %$
b1 %$
b0 O$
b1 O$
b10 O$
b11 O$
b100 O$
b101 O$
b10 N$
b110 O$
b111 O$
b1000 O$
b0 I$
b1 I$
b10 I$
b11 I$
b100 I$
b101 I$
b110 I$
b11 H$
b111 I$
b0 C$
b1 C$
b10 C$
b11 C$
b100 C$
b101 C$
b110 C$
b0 =$
b1 =$
b10 =$
b11 =$
b100 =$
b101 =$
b0 7$
b1 7$
b10 7$
b11 7$
b100 7$
b0 1$
b1 1$
b10 1$
b11 1$
b0 0%
b1 0%
b10 0%
b0 *%
b1 *%
b0 T%
b1 T%
b10 T%
b11 T%
b100 T%
b101 T%
b10 S%
b110 T%
b111 T%
b1000 T%
b0 N%
b1 N%
b10 N%
b11 N%
b100 N%
b101 N%
b110 N%
b11 M%
b111 N%
b0 H%
b1 H%
b10 H%
b11 H%
b100 H%
b101 H%
b110 H%
b0 B%
b1 B%
b10 B%
b11 B%
b100 B%
b101 B%
b0 <%
b1 <%
b10 <%
b11 <%
b100 <%
b0 6%
b1 6%
b10 6%
b11 6%
1##
1"#
1%#
1i"
1h"
1k"
1)#
#80000
0!
0l
#85000
1!
1l
b11010 (!
b11010 )!
b10 *!
1d
1b
1a
1L
1J
1I
14
#90000
b100 g
b11111110 $
b11111111 #
b111000111110101100011010001000110101100011010001000 %
0!
1y
1w
1u
1s
0#!
1"!
1~
1}
1{
0l
11!
10!
1/!
1.!
1,!
09!
08!
07!
06!
04!
b1 .#
b10 .#
b110101101100011001001000 -#
b11 .#
b110101101100001001001000 -#
b100 .#
b110101101001001001001000 -#
b101 .#
b110101001001001001001000 -#
b110 .#
b110001001001001001001000 -#
b111 .#
b1001001001001001001000 -#
b1000 .#
b1000 :#
b111 :#
b11011010000000000000000 9#
b110 :#
b101 :#
b11011010010000000000000 9#
b100 :#
b11011010010010000000000 9#
b11 :#
b11011010010010001000000 9#
b10 :#
b11011010010010001001000 9#
b1 :#
b0 :#
b1000 >#
b111 >#
b11011010000000000000000 =#
b110 >#
b101 >#
b11011010010000000000000 =#
b100 >#
b11011010010001000000000 =#
b11 >#
b11011010010001001000000 =#
b10 >#
b1 >#
b0 >#
b1 2#
b11011010010010001000000 1#
b10 2#
b11 2#
b100 2#
b11011010011010001000000 1#
b101 2#
b11011100011010001000000 1#
b110 2#
b11101100011010001000000 1#
b111 2#
b110101100011010001000000 1#
b1000 2#
b1 6#
b11011010010001001001000 5#
b10 6#
b11011010010001010001000 5#
b11 6#
b11011010010011010001000 5#
b100 6#
b11011010100011010001000 5#
b101 6#
b11011101100011010001000 5#
b110 6#
b11110101100011010001000 5#
b111 6#
b111110101100011010001000 5#
b1000 6#
1N"
1K"
1G"
1B"
1A"
19"
16"
12"
1/"
1*"
1)"
1L!
0K!
0H!
1F!
0D!
0A!
0>!
1=!
0<!
0;!
1!"
0|!
1{!
1x!
0u!
1t!
1s!
0r!
1q!
0p!
1n!
1k!
0g!
1^!
0Z!
1Y!
0W!
1V!
0U!
1S!
b1000 :#
b110011010010010001001000 9#
b111 :#
b110101010010010001001000 9#
b110 :#
b110101100010010001001000 9#
b101 :#
b110101100011010001001000 9#
b100 :#
b11 :#
b10 :#
b110101100011010001000000 9#
b1 :#
b0 :#
b1000 >#
b111011010010001001000000 =#
b111 >#
b111110010010001001000000 =#
b110 >#
b111110101010001001000000 =#
b101 >#
b111110101100001001000000 =#
b100 >#
b111110101100011001000000 =#
b11 >#
b111110101100011010000000 =#
b10 >#
b111110101100011010001000 =#
b1 >#
b0 >#
1Q"
0N"
1M"
1J"
0G"
1F"
1E"
0D"
1C"
0B"
1@"
1="
09"
10"
0,"
1+"
0)"
1("
0'"
1%"
#95000
1!
1l
b11111110 $!
b1001001001001001001000 %!
b110101100011010001000000 &!
b111110101100011010001000 '!
1g$
1c$
1a$
1`$
1\$
1[$
0Z$
1Y$
1W$
1V$
1S$
1_#
1[#
1Y#
1X#
0U#
1T#
1S#
1Q#
0P#
1N#
1|$
0{$
0x$
1v$
0t$
0q$
0n$
1m$
0l$
0k$
1w#
0v#
0s#
1q#
0o#
0l#
0i#
1h#
0g#
0f#
1G#
1F#
1E#
1D#
1B#
b1 J#
b100001000100000000000000010000 I#
b10 J#
b100001000100000000001000010000 I#
b11 J#
b100001000100000011001000010000 I#
b100 J#
b100001000101000011001000010000 I#
b101 J#
b100001010101000011001000010000 I#
b110 J#
b100110010101000011001000010000 I#
b111 J#
b1110110010101000011001000010000 I#
b1000 J#
b0 %$
b1 %$
b0 +$
b1 +$
b110 *$
b10 +$
b0 1$
b1 1$
b101 0$
b10 1$
b11 1$
b0 7$
b1 7$
b100 6$
b10 7$
b11 7$
b100 7$
b0 =$
b1 =$
b11 <$
b10 =$
b11 =$
b100 =$
b101 =$
b0 N$
b0 O$
b1 O$
b10 O$
b11 O$
b100 O$
b101 O$
b110 O$
b111 O$
b1000 O$
b0 H$
b0 I$
b1 I$
b1 H$
b10 I$
b11 I$
b100 I$
b101 I$
b110 I$
b111 I$
b0 C$
b1 C$
b10 B$
b10 C$
b11 C$
b100 C$
b101 C$
b110 C$
b0 *%
b1 *%
b0 0%
b1 0%
b111 /%
b10 0%
b0 6%
b1 6%
b110 5%
b10 6%
b11 6%
b0 <%
b1 <%
b101 ;%
b10 <%
b11 <%
b100 <%
b0 B%
b1 B%
b100 A%
b10 B%
b11 B%
b100 B%
b101 B%
b0 H%
b1 H%
b11 G%
b10 H%
b11 H%
b100 H%
b101 H%
b110 H%
b0 S%
b0 T%
b1 T%
b1 S%
b10 T%
b11 T%
b100 T%
b101 T%
b110 T%
b111 T%
b1000 T%
b0 M%
b0 N%
b1 N%
b10 M%
b10 N%
b11 N%
b100 N%
b101 N%
b110 N%
b111 N%
0##
1&#
0%#
1~"
1}"
1y"
1x"
1v"
1t"
1s"
1r"
1q"
1p"
1e"
0h"
0k"
1c"
1b"
1^"
1]"
1["
1Y"
1X"
1*#
1(#
#100000
0!
0l
#105000
1!
1l
b110101100011010001000 (!
b111110101100011010001 )!
b111 *!
0d
0a
1^
1\
1[
1W
1V
1T
1R
1Q
1M
0L
0J
1G
1F
1B
1A
1?
1=
1<
1;
1:
19
15
13
#110000
b101 g
